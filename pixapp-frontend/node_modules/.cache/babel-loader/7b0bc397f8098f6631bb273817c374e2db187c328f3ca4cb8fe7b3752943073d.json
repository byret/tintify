{"ast":null,"code":"import Color from'color';export const generatePalette=(scheme,baseColor,count)=>{const color=Color(baseColor);let colors=[];switch(scheme){case'monochromatic':colors=generateMonochromatic(color,count);break;case'analogous':colors=generateAnalogous(color,count);break;case'complementary':colors=generateComplementary(color,count);break;case'split_complementary':colors=generateSplitComplementary(color,count);break;case'triadic':colors=generateTriadic(color,count);break;case'square':colors=generateSquare(color,count);break;case'rectangle':colors=generateTetradic(color,count);break;default:colors=Array(count).fill(baseColor);}return colors;};const generateMonochromatic=(color,count)=>{let palette=[];for(let i=0;i<count;i++){palette.push(color.lightness(i/count*100).hex());}return palette;};const generateAnalogous=(color,count)=>{let palette=[];const angle=30;for(let i=0;i<count;i++){palette.push(color.rotate(i*angle).hex());}return palette;};const generateComplementary=color=>{return[color.hex(),color.rotate(180).hex()];};const generateSplitComplementary=color=>{return[color.hex(),color.rotate(150).hex(),color.rotate(-150).hex()];};const generateTriadic=color=>{return[color.hex(),color.rotate(120).hex(),color.rotate(240).hex()];};const generateSquare=color=>{return[color.hex(),color.rotate(90).hex(),color.rotate(180).hex(),color.rotate(270).hex()];};const generateTetradic=color=>{return[color.hex(),color.rotate(60).hex(),color.rotate(180).hex(),color.rotate(240).hex()];};","map":{"version":3,"names":["Color","generatePalette","scheme","baseColor","count","color","colors","generateMonochromatic","generateAnalogous","generateComplementary","generateSplitComplementary","generateTriadic","generateSquare","generateTetradic","Array","fill","palette","i","push","lightness","hex","angle","rotate"],"sources":["C:/Users/byret/Desktop/pixapp/pixapp-frontend/src/components/colorUtils.js"],"sourcesContent":["import Color from 'color';\r\n\r\nexport const generatePalette = (scheme, baseColor, count) => {\r\n  const color = Color(baseColor);\r\n  let colors = [];\r\n\r\n  switch (scheme) {\r\n    case 'monochromatic':\r\n      colors = generateMonochromatic(color, count);\r\n      break;\r\n    case 'analogous':\r\n      colors = generateAnalogous(color, count);\r\n      break;\r\n    case 'complementary':\r\n      colors = generateComplementary(color, count);\r\n      break;\r\n    case 'split_complementary':\r\n      colors = generateSplitComplementary(color, count);\r\n      break;\r\n    case 'triadic':\r\n      colors = generateTriadic(color, count);\r\n      break;\r\n    case 'square':\r\n      colors = generateSquare(color, count);\r\n      break;\r\n    case 'rectangle':\r\n      colors = generateTetradic(color, count);\r\n      break;\r\n    default:\r\n      colors = Array(count).fill(baseColor);\r\n  }\r\n\r\n  return colors;\r\n};\r\n\r\nconst generateMonochromatic = (color, count) => {\r\n  let palette = [];\r\n  for (let i = 0; i < count; i++) {\r\n    palette.push(color.lightness((i / count) * 100).hex());\r\n  }\r\n  return palette;\r\n};\r\n\r\nconst generateAnalogous = (color, count) => {\r\n  let palette = [];\r\n  const angle = 30;\r\n  for (let i = 0; i < count; i++) {\r\n    palette.push(color.rotate(i * angle).hex());\r\n  }\r\n  return palette;\r\n};\r\n\r\nconst generateComplementary = (color) => {\r\n  return [color.hex(), color.rotate(180).hex()];\r\n};\r\n\r\nconst generateSplitComplementary = (color) => {\r\n  return [color.hex(), color.rotate(150).hex(), color.rotate(-150).hex()];\r\n};\r\n\r\nconst generateTriadic = (color) => {\r\n  return [color.hex(), color.rotate(120).hex(), color.rotate(240).hex()];\r\n};\r\n\r\nconst generateSquare = (color) => {\r\n  return [color.hex(), color.rotate(90).hex(), color.rotate(180).hex(), color.rotate(270).hex()];\r\n};\r\n\r\nconst generateTetradic = (color) => {\r\n  return [color.hex(), color.rotate(60).hex(), color.rotate(180).hex(), color.rotate(240).hex()];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}